%{
#include <stdio.h>
#include "structs.h"
#include "symboltable.h"
#include "yyfunctions.h"
#include <string>

Stm thesyntree;

%}

%union{
  //Literals and base classes
  std::string id;
  bool boollit;
  int intlit;
  Stm_ stm;
  Exp_ exp;

  //Lists
  ExpList explist;
  IdList idlist;
  StmList stmlist;
  ParamList paramlist;

  //Statements and statement related objects
  Param_declaration param_declaration;
  Function_signature func_signature;
  PrintStm printstm;
  Function_DeclarationStm func_declarationstm;
  DeclarationStm declarationstm;
  AssignStm assignstm;
  ReturnStm returnstm;
  BlockStm blockstm;
  VoidFunctionStm voidfunctionstm;
  IncDecStm incdecstm;
  If_stm if_stm;
  For_stm for_stm;

  //Expressions
  IdExp idexp;
  IntlitExp intlitexp;
  BoollitExp boollitexp;
  ArithmeticOpExp arithmeticopexp;
  ArithmeticAssignOpExp arithmeticassignopexp;
  BooleanOpExp booleanopexp;
  BooleanArithmeticOpExp booleanarithmeticopexp;
  NotExp nexp;
  FunctionExp functionexp;
}

%token <id> IDENTIFIER 
%token <boollit> BOOLLITERAL
%token <intlit> SEMICOLON INT BOOL RETURN VAR IF FOR LPAREN RPAREN LBRACE RBRACE PLUS MIN MUL DIV PLUSASSIGN MINASSIGN 
%token <intlit> MULASSIGN DIVASSIGN AND OR NOT INC DEC GT GE LT LE EQ NE INTLITERAL 
%token <intlit> COMMA PRINT FUNC

%left MUL DIV
%left PLUS MIN
%nonassoc EQ NE
%nonassoc GT GE LT LE
%nonassoc AND
%nonassoc OR



//Base 
%type <stm> statement
%type <exp> expression

//Lists
%type <explist> expressionlist
%type <idlist> identifierlist
%type <stmlist> statementlist
%type <paramlist> parameterlist

//Statements and statement related types
%type <param_declaration> parameter_declaration
%type <func_signature> function_signature
%type <printstm> print_statement
%type <func_declarationstm> function_declaration_statement
%type <declarationstm> declaration_statement
%type <assignstm> assignment_statement
%type <returnstm> return_statement
%type <blockstm> block_statement
%type <voidfunctionstm> void_function_statement
%type <incdecstm> increment_decrement_statement
%type <if_stm> if_statement
%type <for_stm> for_statement

//Expressions
%type <functionexp> function_expression
%type <arithmeticopexp> arithmetic_op_expression
%type <arithmeticassignopexp> arithmetic_assign_op_expression
%type <booleanopexp> boolean_op_expression
%type <booleanarithmeticopexp> boolean_arithmetic_op_expression 
%type <nexp> notexp

%%


statement : declaration_statement 
          | assignment_statement 
          | if_statement
          | for_statement
          | return_statement
          | block_statement
          | print_statement
          | void_function_statement
          ;

statementlist : statement statementlist {$$ = new StmList($1, &$2);}
              | statement {$$ = new StmList($1, nullptr);}
              ;

identifierlist : IDENTIFIER identifierlist {$$ = new IdList($1, &$2);}
               | IDENTIFIER {$$ = new IdList($1, nullptr);}
               ;

void_function_statement : IDENTIFIER LPAREN expressionlist RPAREN SEMICOLON {$$ = new VoidFunctionStm($3, $1); thesyntree = $$;}
                        ;

print_statement : PRINT LPAREN expressionlist RPAREN {$$ = new PrintStm(&$3); thesyntree = $$;}

//Check if these lists are of equal size
assignment_statement : identifierlist EQ expressionlist SEMICOLON {$$ = new AssignStm(&$1, &$3); thesyntree = $$;}
           ;

declaration_statement : VAR identifierlist INT SEMICOLON {$$ = new DeclarationStm($3, $2, nullptr); thesyntree = $$;}
                      | VAR identifierlist BOOL SEMICOLON {$$ = new DeclarationStm($3, $2, nullptr); thesyntree = $$;}
                      | VAR identifierlist INT EQ expressionlist SEMICOLON {$$ = new DeclarationStm($3, $2, $5); thesyntree = $$;}
                      | VAR identifierlist BOOL EQ expressionlist SEMICOLON {$$ = new DeclarationStm($3, $2, $5); thesyntree = $$;}
                      | VAR identifierlist EQ expressionlist SEMICOLON{$$ = new DeclarationStm(-1, $2, $5); thesyntree = $$;}
                      ;


function_declaration_statement : FUNC IDENTIFIER function_signature LBRACE statementlist RBRACE{$$ = new Function_DeclarationStm($3, $5, $2); thesyntree = $$;}
            ;

function_signature : LPAREN parameterlist RPAREN INT {$$ = new Function_signature($2, $4);}
                   | LPAREN parameterlist RPAREN BOOL {$$ = new Function_signature($2, $4);}
                   | LPAREN parameterlist RPAREN {$$ = new Function_signature($2, -1);}
                   ;


parameterlist : parameter_declaration {$$ = new ParamList($1, nullptr);}
              | parameterlist COMMA parameter_declaration {$$ = new ParamList($1, $3);}
              | {$$ = nullptr;}
              ;

parameter_declaration : IDENTIFIER INT {$$ = new Param_declaration($1, $2);}
                      | IDENTIFIER BOOL {$$ = new Param_declaration($1, $2);}
                      ;

if_statement : IF LBRACE expression RBRACE block_statement{$$ = new If_stm($3, $5); thesyntree = $$;} //Else not implemented
             ;

for_statement : FOR LBRACE expression RBRACE block_statement{$$ = new For_stm($3, $5); thesyntree = $$;}
              ;

return_statement : RETURN SEMICOLON {$$ = new ReturnStm(nullptr); thesyntree = $$}
                 | RETURN expression SEMICOLON {$$ = new ReturnStm($2); thesyntree = $$;}
                   
                 ;

block_statement : LBRACE statementlist RBRACE{$$ = new BlockStm($2); thesyntree = $$;}
                ;

increment_decrement_statement : IDENTIFIER INC SEMICOLON {$$ = new IncDecStm($2, $1);}                
                              | IDENTIFIER DEC SEMICOLON {$$ = new IncDecStm($2, $1);}
                              ;

//EXPRESSIONS

expressionlist : expressionlist ',' expression {$$ = new ExpList($3, &$1);}
               | expression {$$ = new ExpList($1, nullptr);}
               ;

expression : INTLITERAL {$$ = $1;} 
           | BOOLLITERAL {$$ = $1;}
           | IDENTIFIER {

              ReturnValue returnValue = lookupSymbol($1);

              if(returnValue.intValue == nullptr){
                $$ = new BoollitExp(*returnValue.boolValue);
              }
              else{
                $$ = new IntlitExp(*returnValue.intValue);
              }
            
            }
           | function_expression
           | arithmetic_op_expression
           | arithmetic_assign_op_expression
           | boolean_op_expression
           | boolean_arithmetic_op_expression
           | LPAREN expression RPAREN               
           ;


notexp : NOT expression SEMICOLON {$$ = new NotExp($2);}
       ;

function_expression : IDENTIFIER LPAREN expressionlist RPAREN SEMICOLON{$$ = new FunctionExp($3, $1);}
           ;

arithmetic_op_expression : 
             expression PLUS expression   {$$ = new ArithmeticOpExp($1, $2, $3); }
           | expression MIN expression    {$$ = new ArithmeticOpExp($1, $2, $3); }
           | expression MUL expression    {$$ = new ArithmeticOpExp($1, $2, $3); }
           | expression DIV expression    {$$ = new ArithmeticOpExp($1, $2, $3); }

arithmetic_assign_op_expression :
             IDENTIFIER PLUSASSIGN expression   {$$ = new ArithmeticAssignOpExp($1, $2, $3); } 
           | IDENTIFIER MINASSIGN expression    {$$ = new ArithmeticAssignOpExp($1, $2, $3); }
           | IDENTIFIER MULASSIGN expression    {$$ = new ArithmeticAssignOpExp($1, $2, $3); }
           | IDENTIFIER DIVASSIGN expression    {$$ = new ArithmeticAssignOpExp($1, $2, $3); }

boolean_op_expression : 
             expression AND expression    {$$ = new BooleanOpExp($1, $2, $3); }
           | expression OR expression     {$$ = new BooleanOpExp($1, $2, $3); }
           | expression EQ expression     {$$ = new BooleanOpExp($1, $2, $3); } 
           | expression NE expression     {$$ = new BooleanOpExp($1, $2, $3); }

boolean_arithmetic_op_expression:
             expression GT expression     {$$ = new BooleanArithmeticOpExp($1, $2, $3); }
           | expression GE expression     { $$ = new BooleanArithmeticOpExp($1, $2, $3); }
           | expression LT expression     { $$ = new BooleanArithmeticOpExp($1, $2, $3); }
           | expression LE expression     { $$ = new BooleanArithmeticOpExp($1, $2, $3); }

         

%%

int main() {
    pushSymbolTable();
    yyparse();
    return 0;
}

int yyerror(std::string message) {
    printf("Error: %s\n", message);
    yyabort();
    return 1;
}

int yylex() {
}






