%{

  #include <string>
  #include <stdio.h>
  #include <iostream>
  #include "structs.hpp"
  #include "symboltable.hpp"
  #include <string>
  #include "ReturnValue.hpp" 
  #include "tokens.h"
  #include "lexer.h"
  #include "functiontable.hpp"
  #include "lex.yy.c"

  Stm thesyntree;

%}

//TODO: implement the rest and implement package main functionality
// -> make initial program statement consisting of a statement list 
// these statements will be executed 
// after that is done lookup the main function in the function table and execute everything


%union{
  //Literals and base classes
  char* id;

  bool boollit;
  int intlit;
  Stm stm;
  Exp exp;
  //Lists
  ExpList* explist;
  StmList* stmlist;
}

%token <id> IDEN 
%token <boollit> BOOLLITERAL
%token <intlit> INTLITERAL
%token  SEMICOLON INT BOOL RETURN VAR IF FOR LPAREN RPAREN LBRACE RBRACE PLUS MIN MUL DIV PLUSASSIGN MINASSIGN 
%token  MULASSIGN DIVASSIGN AND OR NOT INC DEC GT GE LT LE EQ NE 
%token  COMMA PRINT FUNC


%left MUL DIV
%left PLUS MIN
%nonassoc EQ NE
%nonassoc GT GE LT LE
%nonassoc AND
%nonassoc OR



//Base 
%type <stm> statement
%type <exp> expression

//Lists
%type <explist> expressionlist

%type <stmlist> statementlist

%type <stm> print_statement

%type <stm> block_statement 

%type <stm> if_statement
%type <stm> for_statement

//Expressions

%start statement

%%

/* program : statementlist
        | error
        ; */

statement : LPAREN SEMICOLON {std::cout << "test succeeded";}
          | block_statement
          | if_statement
          | for_statement
          | print_statement
          ;

statementlist : statement statementlist {$$ = new StmList($1, $2);}
              | statement {$$ = new StmList($1, nullptr);}
              ; 


print_statement : PRINT LPAREN expressionlist RPAREN {$$ = new PrintStm($3); thesyntree = $$;}


if_statement : IF LPAREN expression RPAREN block_statement{std::cout << "IF LPAREN expression RPAREN block_statement"; $$ = new If_stm($3, $5); thesyntree = $$;} //Else not implemented
             ;

for_statement : FOR LPAREN expression RPAREN block_statement{$$ = new For_stm($3, $5); thesyntree = $$;}
              ;

block_statement : LBRACE statementlist RBRACE{$$ = new BlockStm($2); thesyntree = $$;}
                ;



//EXPRESSIONS

expressionlist : expressionlist COMMA expression {$$ = new ExpList($3, $1);}
               | expression {$$ = new ExpList($1, nullptr);}
               ;

expression : INTLITERAL {$$ = new IntlitExp($1);} 
           | BOOLLITERAL {$$ = new BoollitExp($1);}
           | LPAREN expression RPAREN               
           ;
%%



int main(int argc, char* argv[]) {
    
    char *tokens[] = {
    "SEMICOLON",
    "ID",
    "INT", "BOOL",
    "PACKAGE", "RETURN", "VAR", "IF", "FOR",
    "LPAREN", "RPAREN", "LBRACE", "RBRACE",
    "PLUS", "MIN", "MUL", "DIV", 
    "PLUSASSIGN", "MINASSIGN", "MULASSIGN", "DIVASSIGN",
    "AND", "OR", "NOT",
    "INC", "DEC",
    "GT", "GE", "LT", "LE", "EQ", "NE",
    "INTLITERAL", "BOOLLITERAL"
    }; 


    int tokenid;

    std::cout << "Reading tokens: " << "\n\n";
    symbolhandler.pushSymbolTable(SymbolTable());

    yyin = fopen("./gotest.txt", "r");
 
    //Print the tokens
    while (tokenid=yylex())
    {
        /* Token codes start from 250 */ 
        std::cout <<  tokens[tokenid-250];

        /* Append value */
        if ( (tokenid == IDEN) || (tokenid == INT) || (tokenid == BOOL) )  std::cout << "=\"%s\"", yytext;
    }
      
    std::cout << "\n";
    std::cout << "Parsing instructions: " << "\n\n";
    yyparse();

    //thesyntree->interp();  

    return 0;
}

void yyerror (char *s) {
    std::cerr << s << " " << yytext << std::endl;
}
