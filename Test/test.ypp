%{

  #include <string>
  #include <stdio.h>
  #include <iostream>
  #include "structs.hpp"
  #include "symboltable.hpp"
  #include <string>
  #include "ReturnValue.hpp" 
  #include "tokens.h"
  #include "lexer.h"
  #include "functiontable.hpp"
  #include "lex.yy.c"
  #include "symboltypetable.hpp"

  Stm thesyntree;

%}

//TODO: implement the rest and implement package main functionality


%union{
  //Literals and base classes
  char* id;

  bool boollit;
  int intlit;
  Stm stm;
  Exp exp;

  //Lists
  ExpList* explist;
  StmList* stmlist;
  IdList*  idlist;
  ParamList* paramlist;
  DeclarationList* decllist;

  //Function related stuff
  Param_declaration* paramdecl;
  Function_signature* funcsig;
}

%token <id> IDEN 
%token <boollit> BOOLLITERAL
%token <intlit> INTLITERAL

//TODO: DECLARATIONLIST
//PACKAGE
//TEST BY CALLING MAIN AND SO ON
//FINISH UP

%token  SEMICOLON INT BOOL RETURN VAR IF FOR LPAREN RPAREN LBRACE RBRACE PLUS MIN MUL DIV PLUSASSIGN MINASSIGN 
%token  MULASSIGN DIVASSIGN AND OR NOT INC DEC GT GE LT LE EQ NE 
%token  COMMA PRINT FUNC PACKAGE IS


%left MUL DIV
%right PLUS MIN
%left NOT
%nonassoc EQ NE
%nonassoc GT GE LT LE
%nonassoc AND
%nonassoc OR
%nonassoc INC DEC



//Base 
%type <stm> statement
%type <exp> expression
%type <stm> program

//Lists
%type <explist> expressionlist
%type <stmlist> statementlist
%type <idlist> identifierlist
%type <paramlist> parameterlist
%type <decllist> declaration_list

//Statements
%type <stm> print_statement
%type <stm> block_statement 
%type <stm> if_statement
%type <stm> for_statement
%type <stm> declaration_statement
%type <stm> assignment_statement
%type <stm> arithmetic_assign_op_statement
%type <stm> inc_dec_statement
%type <stm> return_statement
%type <stm> function_declaration_statement
%type <stm> void_function_statement
%type <stm> package_statement

//Expressions
%type <exp> arithmetic_op_expression
%type <exp> boolean_op_expression
%type <exp> boolean_arithmetic_op_expression 
%type <exp> function_expression

//Function related stuff
%type <funcsig>   function_signature
%type <paramdecl> parameter_declaration

%start program

%%

//TODO: WRITE PROGRAM STRUCT THAT DOESN'T CAUSE THE STATEMENTS TO BE EXECUTED
//TODO: NOT EXP
program : declaration_list {$$ = new ProgramStm($1);
                            thesyntree = $$;} ;

//TODO: define trivial comment token
/* comment: statementlist SEMICOLON
       ; */


declaration_list : declaration_statement {std::cout << "declaration_list: function_declaration_statement declaration_list" << std::endl;
                                          $$ = new DeclarationList($1, nullptr);
                                         }
                 | function_declaration_statement {std::cout << "declaration_list: function_declaration_statement" << std::endl;
                                                   $$ = new DeclarationList($1, nullptr);
                                                  }
                 | package_statement{std::cout << "declaration_list: package_statement" << std::endl;
                                                   $$ = new DeclarationList($1, nullptr);
                 }
                 | function_declaration_statement declaration_list {
                                                                   std::cout << "declaration_list: function_declaration_statement declaration_list" << std::endl;
                                                                   $$ = new DeclarationList($1, $2);}
                 | declaration_statement declaration_list {
                                                          std::cout << "declaration_list: declaration_statement declaration_list" << std::endl;
                                                          $$ = new DeclarationList($1, $2);}
                 | package_statement declaration_list {
                                                          std::cout << "declaration_list: package_statement declaration_list" << std::endl;
                                                          $$ = new DeclarationList($1, $2);}
                 ;
                                                            

statement : block_statement
          | if_statement
          | for_statement
          | print_statement
          | declaration_statement
          | assignment_statement
          | arithmetic_assign_op_statement
          | inc_dec_statement
          | return_statement
          | function_declaration_statement
          | void_function_statement
          | package_statement
          ;

//This parsing works in the wrong order, but in declarationstm the values are assigned to the right vals
identifierlist: IDEN {
                  std::cout << "identifierlist : IDEN " << $1 << "\n";
                  char* identifier = new char[std::strlen($1) + 1];
                  std::strcpy(identifier, $1);
                  $$ = new IdList(identifier, nullptr);
                }
              | identifierlist COMMA IDEN {
                  std::cout << "identifierlist : identifierlist COMMA IDEN " << $3 << "\n";
                  char* identifier = new char[std::strlen($3) + 1];
                  std::strcpy(identifier, $3);
                  $$ = new IdList(identifier, $1);
                }
              ;

statementlist : statement statementlist {std::cout << "statementlist: statement statementlist \n"; 
                                        $$ = new StmList($1, $2);}
              | statement {std::cout << "statementlist: statement \n"; 
                                        $$ = new StmList($1, nullptr);}
              ; 

block_statement : LBRACE statementlist RBRACE{std::cout << "LBRACE statementlist RBRACE \n";
                                              $$ = new BlockStm($2); thesyntree = $$;}
                |  LBRACE RBRACE{std::cout << "LBRACE RBRACE \n";
                                              $$ = new BlockStm(nullptr); thesyntree = $$;}
                ;

if_statement : IF expression block_statement{std::cout << "IF expression block_statement \n"; 
                                                          $$ = new If_stm($2, $3); thesyntree = $$;}
             ;

for_statement : FOR expression block_statement{std::cout << "for_statement : FOR LPAREN expression RPAREN block_statement \n"; 
                                                            $$ = new For_stm($2, $3); thesyntree = $$;}
              ;

//Niet als functie gedefinieerd
print_statement : PRINT LPAREN expressionlist RPAREN SEMICOLON{std::cout << "print_statement : PRINT LPAREN expressionlist RPAREN \n"; 
                                                      $$ = new PrintStm($3); thesyntree = $$;}

declaration_statement : 
                        VAR identifierlist IS expressionlist SEMICOLON{std::cout << "declaration_statement : VAR identifierlist IS expressionlist SEMICOLON \n";
                                                                      $$ = new DeclarationStm(-1, $2, $4); thesyntree = $$;}    
                      | VAR identifierlist BOOL IS expressionlist SEMICOLON {std::cout << "declaration_statement : VAR identifierlist type IS expressionlist SEMICOLON \n";
                                                                            $$ = new DeclarationStm(BOOL, $2, $5); thesyntree = $$;}
                      | VAR identifierlist INT IS expressionlist SEMICOLON {std::cout << "declaration_statement : VAR identifierlist type IS expressionlist SEMICOLON \n";
                                                                            $$ = new DeclarationStm(INT, $2, $5); thesyntree = $$;}
                      | VAR identifierlist BOOL SEMICOLON {std::cout << "declaration_statement : VAR identifierlist type SEMICOLON \n";
                                    $$ = new DeclarationStm(BOOL, $2, nullptr); thesyntree = $$;}
                      | VAR identifierlist INT SEMICOLON {std::cout << "declaration_statement : VAR identifierlist type SEMICOLON \n";
                                    $$ = new DeclarationStm(INT, $2, nullptr); thesyntree = $$;}
                      ;


assignment_statement : identifierlist IS expressionlist SEMICOLON {std::cout << "assignment_statement : identifierlist IS expressionlist SEMICOLON \n";
                                                                  $$ = new AssignStm($1, $3); thesyntree = $$;}
                     ;

arithmetic_assign_op_statement :

             IDEN MULASSIGN expression SEMICOLON   { std::cout << "arithmetic_assign_op_statement : IDEN MULASSIGN expression" << std::endl;
                                          $$ = new ArithmeticAssignOpStm($1, MULASSIGN, $3); }
           | IDEN DIVASSIGN expression SEMICOLON  { std::cout << "arithmetic_assign_op_statement : IDEN DIVASSIGN expression" << std::endl;                                       
                                          $$ = new ArithmeticAssignOpStm($1, DIVASSIGN, $3); }
           | IDEN PLUSASSIGN expression SEMICOLON  { std::cout << "arithmetic_assign_op_statement : IDEN PLUSASSIGN expression" << std::endl;
                                          $$ = new ArithmeticAssignOpStm($1, PLUSASSIGN, $3); } 
           | IDEN MINASSIGN expression SEMICOLON   { std::cout << "arithmetic_assign_op_statement : IDEN MINASSIGN expression" << std::endl;
                                          $$ = new ArithmeticAssignOpStm($1, MINASSIGN, $3); }
           ;

inc_dec_statement : 
              IDEN INC SEMICOLON {
                      
                      char* identifier = new char[std::strlen(yylval.id) + 1];
                      std::strcpy(identifier, yylval.id);
                      std::cout << "inc_dec_statement : IDEN " << identifier << "INC SEMICOLON " << std::endl;
                      $$ = new IncDecStm(INC,identifier);
                      }
              | IDEN DEC SEMICOLON{
                      std::cout << "inc_dec_statement : IDEN DEC SEMICOLON " << std::endl;
                      char* identifier = new char[std::strlen($1) + 1];
                      std::strcpy(identifier, $1);
                      $$ = new IncDecStm(DEC,identifier);
                      }
              ;

return_statement : RETURN SEMICOLON {
                  std::cout << "return_statement : RETURN SEMICOLON " << std::endl;
                  $$ = new ReturnStm(nullptr); 
                  thesyntree = $$;}
                 | RETURN expression SEMICOLON {
                  std::cout << "return_statement : RETURN expression SEMICOLON  " << std::endl;
                  $$ = new ReturnStm($2); 
                  thesyntree = $$;}               
                 ;


function_declaration_statement : FUNC IDEN function_signature LBRACE statementlist RBRACE{
                                char* identifier = new char[std::strlen($2) + 1];
                                std::strcpy(identifier, $2);
                                std::cout << "function_declaration_statement : FUNC IDEN " << identifier << " function_signature LBRACE statementlist RBRACE " << std::endl;
                                $$ = new Function_DeclarationStm($3, $5, identifier); 
                                thesyntree = $$;}

                                | FUNC IDEN function_signature LBRACE RBRACE{  
                                char* identifier = new char[std::strlen($2) + 1];
                                std::strcpy(identifier, $2);
                                std::cout << "DECLARING FUNCTION " << identifier << " " << std::endl;                             

                                std::cout << "function_declaration_statement : FUNC IDEN " << identifier << " function_signature" << std::endl;
                                 
                                $$ = new Function_DeclarationStm($3, nullptr, identifier); 
                               
                                thesyntree = $$;
                                }
                                ;

function_signature : LPAREN parameterlist RPAREN INT {
                  std::cout << "function_signature : LPAREN parameterlist RPAREN INT " << std::endl;
                  

                  $$ = new Function_signature($2, INT);
                  }

                   | LPAREN parameterlist RPAREN BOOL {
                    std::cout << "function_signature : LPAREN parameterlist RPAREN BOOL " << std::endl;
                    $$ = new Function_signature($2, BOOL);}
                   | LPAREN parameterlist RPAREN {
                    std::cout << "function_signature : LPAREN parameterlist RPAREN " << std::endl;
                    $$ = new Function_signature($2, -1);}
                   | LPAREN RPAREN INT {
                  std::cout << "function_signature : LPAREN RPAREN INT " << std::endl;
                  $$ = new Function_signature(nullptr, INT);}
                   | LPAREN RPAREN BOOL {
                    std::cout << "function_signature : LPAREN RPAREN BOOL " << std::endl;
                    $$ = new Function_signature(nullptr, BOOL);}
                   | LPAREN RPAREN {
                    std::cout << "function_signature : LPAREN RPAREN " << std::endl;
                    $$ = new Function_signature(nullptr, -1);}
                   ;


parameterlist : parameter_declaration {
                std::cout << "parameterlist : parameter_declaration " << std::endl;
                $$ = new ParamList($1, nullptr);
                }
              | parameterlist COMMA parameter_declaration {
                std::cout << "parameterlist : parameter_declaration " << std::endl;
                $$ = new ParamList($3, $1);}
              ;

parameter_declaration : IDEN INT {
                                char* identifier = new char[std::strlen(yylval.id) + 1];
                                std::strcpy(identifier, yylval.id);
                                $$ = new Param_declaration(identifier, INT);}
                      | IDEN BOOL {  
                                char* identifier = new char[std::strlen(yylval.id) + 1];
                                std::strcpy(identifier, yylval.id);
                                $$ = new Param_declaration(identifier, BOOL);}
                      ;


void_function_statement : IDEN LPAREN expressionlist RPAREN SEMICOLON {
                          char* identifier = new char[std::strlen($1) + 1];
                          std::strcpy(identifier, $1);
                          std::cout << "void_function_statement : IDEN " << identifier << " LPAREN expressionlist RPAREN SEMICOLON " << std::endl;

                          $$ = new VoidFunctionStm($3, identifier); thesyntree = $$;}

                        |  IDEN LPAREN RPAREN SEMICOLON {
                          char* identifier = new char[std::strlen(yylval.id) + 1];
                          std::strcpy(identifier, yylval.id);
                          std::cout << "void_function_statement : IDEN " << identifier << " LPAREN RPAREN SEMICOLON " << std::endl;
                          $$ = new VoidFunctionStm(nullptr, identifier); thesyntree = $$;}

                        ;

package_statement : PACKAGE IDEN SEMICOLON{ 
                          char* identifier = new char[std::strlen($2) + 1];
                          std::strcpy(identifier, $2);
                          std::cout << "package_statement : PACKAGE IDEN " << identifier << std::endl;
                          $$ = new PackageStm(identifier); thesyntree = $$;
                      }

//EXPRESSIONS

expressionlist :  expressionlist COMMA expression {std::cout << "expressionlist COMMA expression  \n";
                                                 $$ = new ExpList($3, $1);}
               | expression {std::cout << "expression  \n";
                            $$ = new ExpList($1, nullptr);}
               ;

expression : IDEN {std::cout << "expression : IDEN " << yylval.id << "\n";
                  char* identifier = new char[std::strlen(yylval.id) + 1];
                  std::strcpy(identifier, yylval.id);
                  $$ = new IdExp(identifier);
                  }
           | NOT expression {$$ = new NotExp($2); std::cout << "expression: NOT expression";}   
           | LPAREN expression RPAREN  {std::cout << "LPAREN expression RPAREN  \n"; $$ = $2;}  
           | arithmetic_op_expression    
           | boolean_op_expression
           | boolean_arithmetic_op_expression      
           | function_expression 
           | INTLITERAL {std::cout << "expression : INTLITERAL " << yylval.intlit << "\n";
                        $$ = new IntlitExp(yylval.intlit);} 
           | BOOLLITERAL {std::cout << "expression : BOOLLITERAL " << yylval.boollit << "\n";
                         $$ = new BoollitExp(yylval.boollit);}
           ;

arithmetic_op_expression : 
             expression MUL expression    {$$ = new ArithmeticOpExp($1, MUL, $3); std::cout << "arithmetic_op_expression : expression MUL expression" << std::endl;}
           | expression DIV expression    {$$ = new ArithmeticOpExp($1, DIV, $3); std::cout << "arithmetic_op_expression : expression DIV expression" << std::endl;}
           | expression PLUS expression   {$$ = new ArithmeticOpExp($1, PLUS, $3); std::cout << "arithmetic_op_expression : expression PLUS expression" << std::endl;}
           | expression MIN expression    {$$ = new ArithmeticOpExp($1, MIN, $3); std::cout << "arithmetic_op_expression : expression MIN expression" << std::endl;} 
           ;

boolean_op_expression: 
             expression AND expression    {$$ = new BooleanOpExp($1, AND, $3); std::cout << "boolean_op_expression : expression AND expression" << std::endl;}
           | expression OR expression     {$$ = new BooleanOpExp($1, OR, $3); std::cout << "boolean_op_expression : expression OR expression" << std::endl;}
           | expression EQ expression     {$$ = new BooleanOpExp($1, EQ, $3); std::cout << "boolean_op_expression : expression EQ expression" << std::endl;} 
           | expression NE expression     {$$ = new BooleanOpExp($1, NE, $3); std::cout << "boolean_op_expression : expression NE expression" << std::endl;}
           ;

boolean_arithmetic_op_expression:
             expression GT expression     {$$ = new BooleanArithmeticOpExp($1, GT, $3); std::cout << "boolean_arithmetic_op_expression : expression GT expression" << std::endl;}
           | expression GE expression     {$$ = new BooleanArithmeticOpExp($1, GE, $3); std::cout << "boolean_arithmetic_op_expression : expression GE expression" << std::endl;}
           | expression LT expression     {$$ = new BooleanArithmeticOpExp($1, LT, $3); std::cout << "boolean_arithmetic_op_expression : expression LT expression" << std::endl;}
           | expression LE expression     {$$ = new BooleanArithmeticOpExp($1, LE, $3); std::cout << "boolean_arithmetic_op_expression : expression LE expression" << std::endl;}
           ;

function_expression : IDEN LPAREN expressionlist RPAREN{
                      char* identifier = new char[std::strlen($1) + 1];
                      std::strcpy(identifier, $1);
                      std::cout << "function_expression : IDEN " << identifier << " LPAREN expressionlist RPAREN" << std::endl;
                      $$ = new FunctionExp($3, identifier);
                       
                    }

                    | IDEN LPAREN RPAREN{
                      char* identifier = new char[std::strlen($1) + 1];
                      std::strcpy(identifier, $1);
                      std::cout << "function_expression : IDEN " << identifier << " LPAREN RPAREN" << std::endl;
                      $$ = new FunctionExp(nullptr, identifier);
                    }
           ;




  
%%



int main(int argc, char* argv[]) {
    
    char *tokens[] = {
    "SEMICOLON",
    "ID",
    "INT", "BOOL",
    "PACKAGE", "RETURN", "VAR", "IF", "FOR",
    "LPAREN", "RPAREN", "LBRACE", "RBRACE",
    "PLUS", "MIN", "MUL", "DIV", 
    "PLUSASSIGN", "MINASSIGN", "MULASSIGN", "DIVASSIGN",
    "AND", "OR", "NOT",
    "INC", "DEC",
    "GT", "GE", "LT", "LE", "EQ", "NE",
    "INTLITERAL", "BOOLLITERAL"
    }; 


    int tokenid;

    symbolhandler.pushSymbolTable(SymbolTable());
    symboltypehandler.pushSymbolTypeTable(SymbolTypeTable());

    yyin = fopen("./gotest.txt", "r");
 
    std::cout << "\n";
    std::cout << "Parsing instructions: " << "\n\n";
    yyparse();

    

    std::cout << "\n\nTypechecking AST:" << std::endl;
    thesyntree->typecheck(); 

    //I use this property for typechecking aswell as interpreting. Hence why I reset it for insurance 
    returnhandler.returnEncountered = false;
   
    std::cout << "\n\nInterpreting AST: \n";
   
    thesyntree->interp();

    VoidFunctionStm main = VoidFunctionStm(nullptr, "main");
    main.interp();  



    return 0;

}

void yyerror (char *s) {
    std::cerr << s << " " << yytext << std::endl;
}
